// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PickyUppy.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PickyUppy::PickyUppy(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pickup.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void PickyUppy::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void PickyUppy::Execute() {
	if(Robot::oi->getGamepad()->GetRawButton(1)){ // Blue - X //
		Robot::pickup->StartMotor();
	}
	else if (Robot::oi->getGamepad()->GetRawButton(2)){ // Green - A //
		Robot::pickup->ReverseMotor();
	}
	else if (Robot::oi->getGamepad()->GetRawButton(3)){ // Red - B //
		// Robot::pickup->GetPickupSolen()->Set(!Robot::pickup->GetPickupSolen()->Get());
		Robot::pickup->RandL();
	}
	else if (Robot::oi->getGamepad()->GetRawButton(4)){  // Orange - Y //
			Robot::pickup->Lower();
	}
	else{
			Robot::pickup->EndMotor();
	}
}

// Make this return true when this Command no longer needs to run execute()
bool PickyUppy::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void PickyUppy::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PickyUppy::Interrupted() {

}

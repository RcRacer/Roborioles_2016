// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "PneumaticSub.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

PneumaticSub::PneumaticSub() : Subsystem("PneumaticSub") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    defenseSolen = RobotMap::pneumaticSubDefenseSolen;
    gShiftSolen = RobotMap::pneumaticSubGShiftSolen;
    scissorSolen = RobotMap::pneumaticSubScissorSolen;
    ratchetSolen = RobotMap::pneumaticSubRatchetSolen;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void PneumaticSub::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void PneumaticSub::RandL(){
	bool dPosition = defenseSolen->Get();
	defenseSolen->Set(!dPosition);
}
void PneumaticSub::GShift() {
	bool gPosition = gShiftSolen->Get();
	printf("gShiftSolen: %s\n",gPosition?"True":"False");
	gShiftSolen->Set(!gPosition);
}
void PneumaticSub::ScissorLift(){
	bool sPosition = scissorSolen->Get();
	scissorSolen->Set(!sPosition);

}
void PneumaticSub::RatchRelease(){
	ratchetSolen->Set(!ratchetSolen->Get());
}

void PneumaticSub::ResetSoleniods() {
	gShiftSolen->Set(false);
	scissorSolen->Set(false);
	defenseSolen->Set(false);
	ratchetSolen->Set(true);
}

void PneumaticSub::PrintValues() {
	SmartDashboard::PutBoolean("gShiftSolen:",gShiftSolen->Get());
	SmartDashboard::PutBoolean("scissorSolen:",scissorSolen->Get());
	SmartDashboard::PutBoolean("ratchetSolen:",ratchetSolen->Get());
}

std::shared_ptr<Solenoid> PneumaticSub::GetGShiftSolenoid(){
	return gShiftSolen;
}

std::shared_ptr<Solenoid> PneumaticSub::GetRatchetSolenoid(){
	return ratchetSolen;
}

std::shared_ptr<Solenoid> PneumaticSub::GetDefenseSolenoid(){
	return defenseSolen;
}


// Put methods for controlling this subsystem
// here. Call these from Commands.


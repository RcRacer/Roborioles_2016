// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/ShootCmd.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftShooterMotor = RobotMap::shooterLeftShooterMotor;
    rightShooterMotor = RobotMap::shooterRightShooterMotor;
    shooterSolenoid = RobotMap::shooterShooterSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //Speed closed-loop, Set() controls set point
    rightShooterMotor->SetControlMode(CANSpeedController::kSpeed);
    leftShooterMotor->SetControlMode(CANSpeedController::kFollower);
    leftShooterMotor->Set(6);

    // Quadrature EncoderCPR=1024
	leftShooterMotor->SetFeedbackDevice(CANTalon::QuadEncoder);
	leftShooterMotor->ConfigEncoderCodesPerRev(1024);
	leftShooterMotor->SetSensorDirection(true);

	rightShooterMotor->SetFeedbackDevice(CANTalon::QuadEncoder);
	rightShooterMotor->ConfigEncoderCodesPerRev(1024);
	rightShooterMotor->SetSensorDirection(true);

}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Shooter::SetSpeed(int speed) {
	double p = 0.3;			/*Kp 0.3 */
	double i = 0.03;		/*Ki 0.03 */
	double d = 3;			/*Kd 3 */
	double f = 0.0003;		/*Kf 0.0003 */
	int izone = 300;		/* encoder ticks/ analog units 300 */
	double ramprate = 36;	/* volts per second, =>0% to 100% in 250ms, 48 */
	int profile = 1;		/* can be 0 or 1 */

/*	leftShooterMotor->SelectProfileSlot(profile);
	leftShooterMotor->SetPID(p, i, d, f);
	leftShooterMotor->SetIzone(izone);
	leftShooterMotor->SetCloseLoopRampRate(ramprate);

	leftShooterMotor->Set(speed);
*/

	rightShooterMotor->SelectProfileSlot(profile);
	rightShooterMotor->SetPID(p, i, d, f);
	rightShooterMotor->SetIzone(izone);
	rightShooterMotor->SetCloseLoopRampRate(ramprate);

	rightShooterMotor->Set(speed);

}
void Shooter::SetDownSpeed(int speed) {
	double p = 0.1;			/*Kp 0.03 */
	double i = 0;			/*Ki 0.003 */
	double d = 0;			/*Kd 3 */
	double f = 0.6;			/*Kf 0.0003 */ // 0.5
	int izone = 300;		/* encoder ticks/ analog units 300 */
	double ramprate = 36;	/* volts per second, =>0% to 100% in 250ms, 48 */
	int profile = 1;		/* can be 0 or 1 */

	rightShooterMotor->SelectProfileSlot(profile);
	rightShooterMotor->SetPID(p, i, d, f);
	rightShooterMotor->SetIzone(izone);
	rightShooterMotor->SetCloseLoopRampRate(ramprate);

	rightShooterMotor->Set(speed);

}
void Shooter::PrintValues() {

	/* SmartDashboard::PutNumber("Left velocity",leftShooterMotor->GetEncVel());
	SmartDashboard::PutNumber("Left speed",leftShooterMotor->GetSpeed());
	SmartDashboard::PutNumber("Left PID",leftShooterMotor->PIDGet());
	SmartDashboard::PutNumber("Left difference",leftShooterMotor->PIDGet()-leftShooterMotor->GetSetpoint());
	SmartDashboard::PutNumber("Left SetPoint",leftShooterMotor->GetSetpoint());

	SmartDashboard::PutNumber("Right velocity",rightShooterMotor->GetEncVel());
	SmartDashboard::PutNumber("Right speed",rightShooterMotor->GetSpeed());
	SmartDashboard::PutNumber("Right PID",rightShooterMotor->PIDGet());
	SmartDashboard::PutNumber("Right difference",rightShooterMotor->PIDGet()-rightShooterMotor->GetSetpoint());
	SmartDashboard::PutNumber("Right SetPoint",rightShooterMotor->GetSetpoint()); */

}

void Shooter::SetSolen(bool value) {
	shooterSolenoid->Set(value);
}

int Shooter::GetMotorVel(){
	return rightShooterMotor->GetEncVel();
}

std::shared_ptr<Solenoid> Shooter::GetShooterSolenoid(){
	return shooterSolenoid;
}

bool Shooter::CompareValues() {
	if(abs((rightShooterMotor->GetSetpoint())/3 - rightShooterMotor->PIDGet() > 2)) {
		return false;
	} else {
		return true;
	}
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveCmd.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftMotor1 = RobotMap::chassisLeftMotor1;
    leftMotor2 = RobotMap::chassisLeftMotor2;
    rightMotor1 = RobotMap::chassisRightMotor1;
    rightMotor2 = RobotMap::chassisRightMotor2;
    driveMotors = RobotMap::chassisDriveMotors;
    compressor = RobotMap::chassisCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    climbLS = RobotMap::chassisClimbLS;
    MotorDirect = 1;

}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    //    SetDefaultCommand(new DriveCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

double Chassis::deadband(double JoystickValue,double DeadbandCutOff) {
	if (JoystickValue < DeadbandCutOff && JoystickValue > DeadbandCutOff*(-1)) {
		return 0;
	} else {
		return (JoystickValue - (abs(JoystickValue)/JoystickValue*DeadbandCutOff))/(1-DeadbandCutOff);
	}
}

void Chassis::DriveWithJoysticks(){
	float left = deadband(Robot::oi->getleftJoy()->GetY(),0.05);

	if (Robot::pneumaticSub->GetGShiftSolenoid()->Get()){
		// Climbing
		float right = deadband(-1*Robot::oi->getGamepad()->GetThrottle(),0.05);
		leftMotor1->Set(left);
		leftMotor2->Set(left);
		if (right>0) {
			if (climbLS->Get()) {
				rightMotor1->Set(right*0.5);
				rightMotor2->Set(right*0.5);
			} else {
				rightMotor1->Set(0);
				rightMotor2->Set(0);
			}
		} else {
			rightMotor1->Set(right);
			rightMotor2->Set(right);
		}
	} else {
		// Driving
		float right = deadband(Robot::oi->getrightJoy()->GetY(),0.05);
		if (Robot::oi->getrightJoy()->GetRawButton(1) && Robot::oi->getleftJoy()->GetRawButton(1)){
			left  = left * -1;
			right = right * -1;
			driveMotors->TankDrive(right,left);
		} else {
			driveMotors->TankDrive(left,right);
		}
	}
}

void Chassis::Stop(){
	leftMotor1->Set(0);
	leftMotor2->Set(0);
	rightMotor1->Set(0);
	rightMotor2->Set(0);
}

void Chassis::Compress() {
	compressor->SetClosedLoopControl(true);
	compressor->Start();
}

void Chassis::driveFeet(double feet=10,double speed=.5){
	// convert to feet
	feet = feet * 12;

	double distance=abs(feet/(3.1415 * diameter)*1000.0);
	while (leftMotor2->GetEncPosition()<distance) {
		leftMotor1->Set(-1 * speed);
		leftMotor2->Set(-1 *speed);
		rightMotor1->Set(speed);
		rightMotor2->Set(speed);
	}
	leftMotor1->Set(0);
	leftMotor2->Set(0);
	rightMotor1->Set(0);
	rightMotor2->Set(0);

}

bool Chassis::driveFeet2(double distance,double speed){

	printf("Distance is %i\n",leftMotor2->GetEncPosition());
	if (leftMotor2->GetEncPosition()<distance) {
		leftMotor1->Set(-1 * speed);
		leftMotor2->Set(-1 *speed);
		rightMotor1->Set(speed);
		rightMotor2->Set(speed);
		return false;
	} else {
		leftMotor1->Set(0);
		leftMotor2->Set(0);
		rightMotor1->Set(0);
		rightMotor2->Set(0);
		return true;
	}
}

void Chassis::PrintValues() {

	// Print encoder positions
	SmartDashboard::PutNumber("leftMotor2 Position: ",leftMotor2->GetEncPosition());
	SmartDashboard::PutNumber("leftMotor2 Velocity",leftMotor2->GetEncVel());
	SmartDashboard::PutNumber("rightMotor2 Position: ",rightMotor2->GetEncPosition());
	SmartDashboard::PutNumber("rightMotor2 Velocity",rightMotor2->GetEncVel());

}

void Chassis::resetPosition(){
    leftMotor1->SetPosition(0);
    leftMotor2->SetPosition(0);
    rightMotor1->SetPosition(0);
    rightMotor2->SetPosition(0);
}

bool Chassis::rotate(double distance, int angle) {
	// Assume 180 degrees = 24 inches (difference between left/right)
	// 24/(3.1415*diameter)*1000 = 2546
	// so 1 degree = 14.15 (2545 / 180)
	// based on center grove practice, 180 degrees = change in left of -4000 (left) and 4000 (right), so 4000/180 = 22.22 encoder/degree
	double speed = 0.5;

	if (angle < 0) {
		speed = speed * -1.0;
	}
	SmartDashboard::PutNumber("Target",distance);
	SmartDashboard::PutNumber("Current",leftMotor2->GetEncPosition());
	if  (abs(leftMotor2->GetEncPosition()) < distance) {
		leftMotor1->Set(speed);
		leftMotor2->Set(speed);
		rightMotor1->Set(speed);
		rightMotor2->Set(speed);
		return false;
	} else {
		leftMotor1->Set(0);
		leftMotor2->Set(0);
		rightMotor1->Set(0);
		rightMotor2->Set(0);
		return true;
	}
}

int Chassis::CurrentPosition() {
	return leftMotor2->GetEncPosition();
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
// #include "USBCamera.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/AutoDriveForward.h"
#include "Commands/AutoGroup1.h"
#include "Commands/AutoPortcullis.h"
#include "Commands/VisionCom.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Pickup> Robot::pickup;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<PneumaticSub> Robot::pneumaticSub;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
// Command *autonomousCommand;
bool Robot::teleop=false;

void Robot::RobotInit() {
	RobotMap::init();
	teleop=false;

	// USBCamera* cam=new USBCamera("cam0",false);
	// cam->SetBrightness(25);
	// chooser = new SendableChooser();
	// chooser->AddDefault("Portcullis/LowBar", new AutoPortcullis());
	// chooser->AddObject("Cross Defense",new AutoDriveForward(10,0.5));
	// chooser->AddObject("Do Nothing",new AutonomousCommand());
	// chooser->AddObject("Cross Defense and Rotate",new AutoGroup1());
	// SmartDashboard::PutData("Autonomous Modes",chooser);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassis.reset(new Chassis());
    pickup.reset(new Pickup());
    shooter.reset(new Shooter());
    pneumaticSub.reset(new PneumaticSub());
    // VisionCom::startGrip();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	//autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
	shooter->ResetResetSoleniods();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	if (SmartDashboard::GetBoolean("DB/Button 0", false)) {
		SmartDashboard::PutBoolean("DB/Button 1",false);
		SmartDashboard::PutBoolean("DB/Button 2",false);
		SmartDashboard::PutString("DB/String 0","Rock wall or Moat");
	} else if(SmartDashboard::GetBoolean("DB/Button 1", false)) {
		SmartDashboard::PutBoolean("DB/Button 0",false);
		SmartDashboard::PutBoolean("DB/Button 2",false);
		SmartDashboard::PutString("DB/String 0","Low bar or Portcullus");
	} else if (SmartDashboard::GetBoolean("DB/Button 2", false)) {
		SmartDashboard::PutBoolean("DB/Button 0",false);
		SmartDashboard::PutBoolean("DB/Button 1",false);
		SmartDashboard::PutString("DB/String 0","Ramparts");
	} else {
		SmartDashboard::PutString("DB/String 0","Doing Nothing");
	}
	shooter->ResetResetSoleniods();
}

void Robot::AutonomousInit() {
	chassis->resetPosition();
	pneumaticSub->ResetSoleniods();
	shooter->ResetResetSoleniods();

	// autonomousCommand = (Command *) chooser->GetSelected();
	if (autonomousCommand.get() != nullptr)
		autonomousCommand -> Start();
	 teleop=false;
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.

	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();

	chassis->resetPosition();
	Robot::pneumaticSub->ResetSoleniods();
	shooter->ResetResetSoleniods();
	// oi->addButton();
	teleop=true;
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	// Robot::pneumaticSub->PrintValues();
	// shooter->PrintValues();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

